name: New trumpet    

on:
  # 定时任务触发条件
  schedule:
    # 晚间任务：北京时间每天 22:00（UTC 14:00）
    - cron: '0 14 * * *'
    # 早间任务：北京时间周一到周五 05:00（UTC 前一天 21:00）
    - cron: '0 21 * * 0-4'
    # 午间任务：北京时间周一到周五 11:40（UTC 03:40）
    - cron: '40 3 * * 1-5'
    # 周末任务：北京时间周六、周日 17:00（UTC 09:00）
    - cron: '0 9 * * sat,sun'
    # 周随机任务：北京时间周末 08:00（UTC 前一天 00:00）
    - cron: '0 0 * * sat,sun'

  # 手动触发条件
  workflow_dispatch:
    description: 手动触发微信阅读任务
    inputs:
      mode:
        type: choice
        description: |
          选择运行模式：
          - 自动：自动模式，根据不同的定时任务规则，生成相应范围内的随机阅读时间。如果是手动触发且未设置自定义延迟，会有 0 - 20 分钟的随机延迟。
          - 手动：手动模式，若未输入自定义阅读时间，会生成 60 - 120（等效 30 - 60 分钟）之间的随机阅读时间；若输入了自定义阅读时间，则使用该时间计算阅读次数。
        required: true
        default: '手动'
        options:
          - 自动
          - 手动
      custom_time:
        type: string
        description: '手动输入自定义阅读时间（分钟，仅手动触发有效）。输入后，会将该时间乘以 2 作为 READ_NUM 用于后续任务。'
        required: false
      custom_delay:
        type: string
        description: '手动输入自定义延迟时间（分钟，仅手动触发有效）。输入后，任务会延迟相应的分钟数执行。'
        required: false
      debug_schedule:
        type: choice
        description: '选择调试定时任务，开启后按指定任务时间运行'
        required: false
        default: '无'
        options:
          - 无
          - 晚间任务
          - 早间任务
          - 午间任务
          - 周末任务
          - 周随机任务


jobs:
  deploy:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # 关键权限声明

    steps:
      - name: 🔧 设置 DNS
        run: |
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
          echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf
          echo "✅ DNS 配置完成"

      - name: 📥 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 设置 Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 安装依赖
        run: |
          echo "::group::📦 安装依赖"
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          pip list
          echo "::endgroup::"
          echo "✅ 依赖安装验证：$(pip list | grep requests)"

      - name: ⏱️ 随机延迟（自动模式或计划模式或手动触发调试模式无自定义延迟）
        if: (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.mode == '自动' || github.event.inputs.debug_schedule != '无') && github.event.inputs.custom_delay == ''))
        run: |
          DELAY_MINUTES=$((RANDOM % 21))
          DELAY_SECONDS=$((RANDOM % 60))
          TOTAL_DELAY=$((DELAY_MINUTES * 60 + DELAY_SECONDS))
          echo "⏳ 生成的随机延迟：${DELAY_MINUTES} 分钟 ${DELAY_SECONDS} 秒"
          sleep $TOTAL_DELAY
          echo "✅ 延迟执行完成"

      - name: ⏱️ 自定义延迟（手动触发）
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.custom_delay != ''
        run: |
          DELAY=${{ github.event.inputs.custom_delay }}
          echo "⏳ 自定义延迟：${DELAY} 分钟"
          sleep $((DELAY * 60))
          echo "✅ 延迟执行完成"

      - name: 🎲 周随机检查
        id: week_random_check
        if: (github.event_name == 'schedule' && github.event.schedule == '0 0 * * sat,sun') || (github.event_name == 'workflow_dispatch' && github.event.inputs.debug_schedule == '周随机任务')
        run: |
          CHECK=$((RANDOM % 7))
          echo "🎲 随机数：$CHECK (需要等于0)"
          if [ $CHECK -ne 0 ]; then
            echo "⏭️ 跳过周随机任务"
            echo "skipped=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "🎉 触发周随机任务"
            echo "skipped=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔢 生成 READ_NUM
        if: steps.week_random_check.outputs.skipped != 'true'
        run: |
          BEIJING_TIME=$(date -u -d '+8 hours' +'%Y-%m-%d %H:%M:%S')
          echo "当前北京时间: $BEIJING_TIME - 开始生成 READ_NUM"
          echo "::group::🔢 生成 READ_NUM"
          echo "事件类型: ${{ github.event_name }}"
          echo "输入模式: ${{ github.event.inputs.mode }}"
          echo "定时规则: ${{ github.event.schedule }}"
          echo "自定义时间: ${{ github.event.inputs.custom_time }}"
          echo "自定义延迟: ${{ github.event.inputs.custom_delay }}"
          echo "调试定时任务: ${{ github.event.inputs.debug_schedule }}"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.debug_schedule }}" != "无" ]]; then
              case "${{ github.event.inputs.debug_schedule }}" in
                晚间任务)
                  SCHEDULE='0 14 * * *'
                  ;;
                早间任务)
                  SCHEDULE='0 21 * * 0-4'
                  ;;
                午间任务)
                  SCHEDULE='40 3 * * 1-5'
                  ;;
                周末任务)
                  SCHEDULE='0 9 * * sat,sun'
                  ;;
                周随机任务)
                  SCHEDULE='0 0 * * sat,sun'
                  ;;
              esac
            else
              SCHEDULE="${{ github.event.schedule }}"
            fi

            if [[ -n "${{ github.event.inputs.custom_time }}" ]]; then
              NUM=$(( ${{ github.event.inputs.custom_time }} * 2 ))
              echo "🕹️ 手动触发 | 使用自定义时间: ${{ github.event.inputs.custom_time }} 分钟，等效 READ_NUM: $NUM"
            else
              if [[ "${{ github.event.inputs.mode }}" == "手动" ]]; then
                NUM=$((RANDOM % 61 + 60))
                echo "🕹️ 手动模式 | 范围: 60-120 (30-60分钟)"
              else
                case "$SCHEDULE" in
                  '0 21 * * 0-4')
                    NUM=$((RANDOM % 31 + 130))
                    echo "🌅 早间任务 | 范围: 130-160"
                    ;;
                  '40 3 * * 1-5')
                    NUM=$((RANDOM % 31 + 160))
                    echo "🌞 午间任务 | 范围: 160-190"
                    ;;
                  '0 14 * * *')
                    NUM=$((RANDOM % 31 + 190))
                    echo "🌙 晚间任务 | 范围: 190-220"
                    ;;
                  '0 9 * * sat,sun')
                    NUM=$((RANDOM % 31 + 190))
                    echo "🎉 周末任务 | 范围: 190-220"
                    ;;
                  '0 0 * * sat,sun')
                    NUM=$((RANDOM % 61 + 120))
                    echo "🎰 周随机任务 | 范围: 120-180"
                    ;;
                  *)
                    NUM=$((RANDOM % 31 + 190))
                    echo "⚠️ 未知触发类型 | 启用安全默认值: 190-220"
                    ;;
                esac
              fi
            fi
          else
            SCHEDULE="${{ github.event.schedule }}"
            case "$SCHEDULE" in
              '0 21 * * 0-4')
                NUM=$((RANDOM % 31 + 130))
                echo "🌅 早间任务 | 范围: 130-160"
                ;;
              '40 3 * * 1-5')
                NUM=$((RANDOM % 31 + 160))
                echo "🌞 午间任务 | 范围: 160-190"
                ;;
              '0 14 * * *')
                NUM=$((RANDOM % 31 + 190))
                echo "🌙 晚间任务 | 范围: 190-220"
                ;;
              '0 9 * * sat,sun')
                NUM=$((RANDOM % 31 + 190))
                echo "🎉 周末任务 | 范围: 190-220"
                ;;
              '0 0 * * sat,sun')
                NUM=$((RANDOM % 61 + 120))
                echo "🎰 周随机任务 | 范围: 120-180"
                ;;
              *)
                NUM=$((RANDOM % 31 + 190))
                echo "⚠️ 未知触发类型 | 启用安全默认值: 190-220"
                ;;
            esac
          fi

          echo "✅ 最终 READ_NUM: $NUM (等效 $((NUM / 2)) 分钟)"
          echo "READ_NUM=$NUM" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: 🚀 执行主程序
        if: steps.week_random_check.outputs.skipped != 'true'
        env:
          WXREAD_CURL_BASH: ${{ secrets.WXREAD_CURL_BASH }}
          PUSH_METHOD: ${{ secrets.PUSH_METHOD }}
          PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}
          WXPUSHER_SPT: ${{ secrets.WXPUSHER_SPT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          READ_NUM: ${{ env.READ_NUM }}
          READ_COMPLETE_HEADER: ${{ secrets.READ_COMPLETE_HEADER }}
        run: |
          echo "=== 执行参数 ==="
          echo "READ_NUM: ${{ env.READ_NUM }}"
          echo "READ_COMPLETE_HEADER: ${{ env.READ_COMPLETE_HEADER }}"
          python main.py || { echo "❌ 主程序执行失败"; exit 1; }

      - name: 📤 提交 log.md
        run: |
          # 使用加密的 GitHub Secrets 配置用户信息
          git config --global user.name ${{ secrets.USER_NAME }}
          git config --global user.email ${{ secrets.USER_EMAIL }}

          if git diff --quiet log.md; then
            echo "✅ 无变更，跳过提交"
          else
            git add log.md
            git commit -m "Update log.md [skip ci]"
            git push
          fi
